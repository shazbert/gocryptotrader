package dca

import (
	"context"
	"fmt"
	"time"

	"github.com/thrasher-corp/gocryptotrader/common"
	strategy "github.com/thrasher-corp/gocryptotrader/exchanges/strategy/common"
)

// OnSignal processing signals that have been generated by the strategy.
func (s *Strategy) OnSignal(ctx context.Context, signal interface{}) (bool, error) {
	if s == nil {
		fmt.Println("bruh")
		return false, strategy.ErrIsNil
	}

	if signal == nil {
		fmt.Println("bruh2")
		return false, strategy.ErrNilSignal
	}

	if _, ok := signal.(time.Time); !ok {
		fmt.Println("bruh3")
		return false, strategy.ErrUnhandledSignal
	}

	err := s.checkAndSubmit(ctx)
	if err != nil {
		fmt.Println(err)
		return false, err
	}

	return s.allocation.Deployed == s.allocation.Total, nil
}

// GetDescription returns the strategy description
func (s *Strategy) GetDescription() string {
	if s == nil {
		return ""
	}
	return fmt.Sprintf("Start:%s End:%s Exchange:%s Pair:%s Asset:%s Interval:%s Window:%s Simulation:%v TotalAmount:%v DeploymentAmount:%v",
		s.Start.Format(common.SimpleTimeFormat),
		s.End.Format(common.SimpleTimeFormat),
		s.Config.Exchange.GetName(),
		s.Config.Pair,
		s.Config.Asset,
		s.Config.Interval,
		s.allocation.Window,
		s.Config.Simulate,
		s.allocation.Total,
		s.allocation.Deployment)
}
