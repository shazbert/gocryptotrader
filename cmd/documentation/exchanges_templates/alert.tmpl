{{define "exchanges alert" -}}
{{template "header" .}}
## Alert

+ This package allows for multiple routines to wait for a state change on any required data.

### Examples:

+ Implementation:

```go
// SomeChangingType defines an example struct with an embedded alert.Notice
// type for easy access to the notice methods.
type SomeChangingType struct {
	ValueThatChanges int64
	Notice
	mu sync.Mutex // Protection for routine shenanigans
}

// Update will update in a separate routine
func (s *SomeChangingType) Update(newValue int64) {
	// This simulates a changing variable or state
	s.mu.Lock()
	s.ValueThatChanges = newValue
	// This will alert any routines that are currently waiting for a change
	s.Alert()
	s.mu.Unlock()
}

// WhatsTheValueScott will retrieve the value that was changed and should be
// different from the past value. Efficiency++
func (s *SomeChangingType) WhatsTheValueScott() int64 {
	s.mu.Lock()
	scottsValue := s.ValueThatChanges
	s.mu.Unlock()
	return scottsValue
}
```

+ Routine waiting for change:

```go
// ExampleRoutineThatWaits defines an exchange potential routine that will wait
// for an impending change.
func ExampleRoutineThatWaits(potentialChange *SomeChangingType) {
	// Warning: Don't do this:
	// dontCapture := potentialChange.Wait(nil)
	// <-dontCapture // This will stop alerting for this specific data type due
	// to the shared nature of the underlying channels using a sync.Pool.
	// Every iteration requires a Wait() call.
	for range potentialChange.Wait(nil) {
		supaVal := potentialChange.WhatsTheValueScott()
		fmt.Println("WOW:", supaVal)
	}
}
```

### Please click GoDocs chevron above to view current GoDoc information for this package
{{template "contributions"}}
{{template "donations" .}}
{{end}}