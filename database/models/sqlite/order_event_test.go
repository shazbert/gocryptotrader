// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlite

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/randomize"
	"github.com/thrasher-corp/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrderEvents(t *testing.T) {
	t.Parallel()

	query := OrderEvents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrderEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrderEvents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderEventSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderEventExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrderEvent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderEventExists to return true, but got false.")
	}
}

func testOrderEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderEventFound, err := FindOrderEvent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orderEventFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrderEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrderEvents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrderEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrderEvents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrderEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderEventOne := &OrderEvent{}
	orderEventTwo := &OrderEvent{}
	if err = randomize.Struct(seed, orderEventOne, orderEventDBTypes, false, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, orderEventTwo, orderEventDBTypes, false, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrderEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderEventOne := &OrderEvent{}
	orderEventTwo := &OrderEvent{}
	if err = randomize.Struct(seed, orderEventOne, orderEventDBTypes, false, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, orderEventTwo, orderEventDBTypes, false, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orderEventBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderEvent) error {
	*o = OrderEvent{}
	return nil
}

func orderEventAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderEvent) error {
	*o = OrderEvent{}
	return nil
}

func orderEventAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrderEvent) error {
	*o = OrderEvent{}
	return nil
}

func orderEventBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderEvent) error {
	*o = OrderEvent{}
	return nil
}

func orderEventAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderEvent) error {
	*o = OrderEvent{}
	return nil
}

func orderEventBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderEvent) error {
	*o = OrderEvent{}
	return nil
}

func orderEventAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderEvent) error {
	*o = OrderEvent{}
	return nil
}

func orderEventBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderEvent) error {
	*o = OrderEvent{}
	return nil
}

func orderEventAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderEvent) error {
	*o = OrderEvent{}
	return nil
}

func testOrderEventsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrderEvent{}
	o := &OrderEvent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orderEventDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrderEvent object: %s", err)
	}

	AddOrderEventHook(boil.BeforeInsertHook, orderEventBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orderEventBeforeInsertHooks = []OrderEventHook{}

	AddOrderEventHook(boil.AfterInsertHook, orderEventAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orderEventAfterInsertHooks = []OrderEventHook{}

	AddOrderEventHook(boil.AfterSelectHook, orderEventAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orderEventAfterSelectHooks = []OrderEventHook{}

	AddOrderEventHook(boil.BeforeUpdateHook, orderEventBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orderEventBeforeUpdateHooks = []OrderEventHook{}

	AddOrderEventHook(boil.AfterUpdateHook, orderEventAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orderEventAfterUpdateHooks = []OrderEventHook{}

	AddOrderEventHook(boil.BeforeDeleteHook, orderEventBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orderEventBeforeDeleteHooks = []OrderEventHook{}

	AddOrderEventHook(boil.AfterDeleteHook, orderEventAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orderEventAfterDeleteHooks = []OrderEventHook{}

	AddOrderEventHook(boil.BeforeUpsertHook, orderEventBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orderEventBeforeUpsertHooks = []OrderEventHook{}

	AddOrderEventHook(boil.AfterUpsertHook, orderEventAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orderEventAfterUpsertHooks = []OrderEventHook{}
}

func testOrderEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderEventColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrderEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderEventToManyOrderTradeEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderEvent
	var b, c TradeEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tradeEventDBTypes, false, tradeEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tradeEventDBTypes, false, tradeEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrderID = a.ID
	c.OrderID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderTradeEvents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrderID == b.OrderID {
			bFound = true
		}
		if v.OrderID == c.OrderID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderEventSlice{&a}
	if err = a.L.LoadOrderTradeEvents(ctx, tx, false, (*[]*OrderEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderTradeEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderTradeEvents = nil
	if err = a.L.LoadOrderTradeEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderTradeEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderEventToManyAddOpOrderTradeEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderEvent
	var b, c, d, e TradeEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderEventDBTypes, false, strmangle.SetComplement(orderEventPrimaryKeyColumns, orderEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradeEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradeEventDBTypes, false, strmangle.SetComplement(tradeEventPrimaryKeyColumns, tradeEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TradeEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderTradeEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrderID {
			t.Error("foreign key was wrong value", a.ID, first.OrderID)
		}
		if a.ID != second.OrderID {
			t.Error("foreign key was wrong value", a.ID, second.OrderID)
		}

		if first.R.Order != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Order != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderTradeEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderTradeEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderTradeEvents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrderEventToOneClientUsingClient(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderEvent
	var foreign Client

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderEventDBTypes, false, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, clientDBTypes, false, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ClientID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Client().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrderEventSlice{&local}
	if err = local.L.LoadClient(ctx, tx, false, (*[]*OrderEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Client == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Client = nil
	if err = local.L.LoadClient(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Client == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderEventToOneSetOpClientUsingClient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderEvent
	var b, c Client

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderEventDBTypes, false, strmangle.SetComplement(orderEventPrimaryKeyColumns, orderEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, clientDBTypes, false, strmangle.SetComplement(clientPrimaryKeyColumns, clientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clientDBTypes, false, strmangle.SetComplement(clientPrimaryKeyColumns, clientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Client{&b, &c} {
		err = a.SetClient(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Client != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ClientID != x.ID {
			t.Error("foreign key was wrong value", a.ClientID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ClientID))
		reflect.Indirect(reflect.ValueOf(&a.ClientID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ClientID != x.ID {
			t.Error("foreign key was wrong value", a.ClientID, x.ID)
		}
	}
}

func testOrderEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderEventSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderEventDBTypes = map[string]string{`ID`: `BIGINT`, `ExchangeOrderID`: `VARCHAR(255)`, `ClientID`: `UUID`, `Exchange`: `VARCHAR(255)`, `CurrencyPair`: `VARCHAR(255)`, `AssetType`: `VARCHAR(255)`, `OrderType`: `VARCHAR(255)`, `OrderSide`: `VARCHAR(255)`, `OrderStatus`: `VARCHAR(255)`, `Amount`: `REAL`, `Price`: `REAL`, `UpdatedAt`: `TIMESTAMP`, `CreatedAt`: `TIMESTAMP`}
	_                 = bytes.MinRead
)

func testOrderEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderEventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderEventAllColumns) == len(orderEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrderEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderEventAllColumns) == len(orderEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderEvent{}
	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderEventDBTypes, true, orderEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderEventAllColumns, orderEventPrimaryKeyColumns) {
		fields = orderEventAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderEventAllColumns,
			orderEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderEventSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
