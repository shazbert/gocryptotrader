// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlite

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/queries/qm"
	"github.com/thrasher-corp/sqlboiler/queries/qmhelper"
	"github.com/thrasher-corp/sqlboiler/strmangle"
)

// TradeEvent is an object representing the database table.
type TradeEvent struct {
	ID            int64   `boil:"id" json:"id" toml:"id" yaml:"id"`
	TradeID       string  `boil:"trade_id" json:"trade_id" toml:"trade_id" yaml:"trade_id"`
	OrderID       int64   `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	Exchange      string  `boil:"exchange" json:"exchange" toml:"exchange" yaml:"exchange"`
	BaseCurrency  string  `boil:"base_currency" json:"base_currency" toml:"base_currency" yaml:"base_currency"`
	QuoteCurrency string  `boil:"quote_currency" json:"quote_currency" toml:"quote_currency" yaml:"quote_currency"`
	Side          string  `boil:"side" json:"side" toml:"side" yaml:"side"`
	Volume        float64 `boil:"volume" json:"volume" toml:"volume" yaml:"volume"`
	Price         float64 `boil:"price" json:"price" toml:"price" yaml:"price"`
	Fee           float64 `boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	Tax           float64 `boil:"tax" json:"tax" toml:"tax" yaml:"tax"`
	ExecutedAt    string  `boil:"executed_at" json:"executed_at" toml:"executed_at" yaml:"executed_at"`
	UpdatedAt     string  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     string  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *tradeEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tradeEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TradeEventColumns = struct {
	ID            string
	TradeID       string
	OrderID       string
	Exchange      string
	BaseCurrency  string
	QuoteCurrency string
	Side          string
	Volume        string
	Price         string
	Fee           string
	Tax           string
	ExecutedAt    string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "id",
	TradeID:       "trade_id",
	OrderID:       "order_id",
	Exchange:      "exchange",
	BaseCurrency:  "base_currency",
	QuoteCurrency: "quote_currency",
	Side:          "side",
	Volume:        "volume",
	Price:         "price",
	Fee:           "fee",
	Tax:           "tax",
	ExecutedAt:    "executed_at",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

// Generated where

var TradeEventWhere = struct {
	ID            whereHelperint64
	TradeID       whereHelperstring
	OrderID       whereHelperint64
	Exchange      whereHelperstring
	BaseCurrency  whereHelperstring
	QuoteCurrency whereHelperstring
	Side          whereHelperstring
	Volume        whereHelperfloat64
	Price         whereHelperfloat64
	Fee           whereHelperfloat64
	Tax           whereHelperfloat64
	ExecutedAt    whereHelperstring
	UpdatedAt     whereHelperstring
	CreatedAt     whereHelperstring
}{
	ID:            whereHelperint64{field: "\"trade_event\".\"id\""},
	TradeID:       whereHelperstring{field: "\"trade_event\".\"trade_id\""},
	OrderID:       whereHelperint64{field: "\"trade_event\".\"order_id\""},
	Exchange:      whereHelperstring{field: "\"trade_event\".\"exchange\""},
	BaseCurrency:  whereHelperstring{field: "\"trade_event\".\"base_currency\""},
	QuoteCurrency: whereHelperstring{field: "\"trade_event\".\"quote_currency\""},
	Side:          whereHelperstring{field: "\"trade_event\".\"side\""},
	Volume:        whereHelperfloat64{field: "\"trade_event\".\"volume\""},
	Price:         whereHelperfloat64{field: "\"trade_event\".\"price\""},
	Fee:           whereHelperfloat64{field: "\"trade_event\".\"fee\""},
	Tax:           whereHelperfloat64{field: "\"trade_event\".\"tax\""},
	ExecutedAt:    whereHelperstring{field: "\"trade_event\".\"executed_at\""},
	UpdatedAt:     whereHelperstring{field: "\"trade_event\".\"updated_at\""},
	CreatedAt:     whereHelperstring{field: "\"trade_event\".\"created_at\""},
}

// TradeEventRels is where relationship names are stored.
var TradeEventRels = struct {
	Order string
}{
	Order: "Order",
}

// tradeEventR is where relationships are stored.
type tradeEventR struct {
	Order *OrderEvent
}

// NewStruct creates a new relationship struct
func (*tradeEventR) NewStruct() *tradeEventR {
	return &tradeEventR{}
}

// tradeEventL is where Load methods for each relationship are stored.
type tradeEventL struct{}

var (
	tradeEventAllColumns            = []string{"id", "trade_id", "order_id", "exchange", "base_currency", "quote_currency", "side", "volume", "price", "fee", "tax", "executed_at", "updated_at", "created_at"}
	tradeEventColumnsWithoutDefault = []string{"id", "trade_id", "order_id", "exchange", "base_currency", "quote_currency", "side", "volume", "price", "fee", "tax", "executed_at", "updated_at"}
	tradeEventColumnsWithDefault    = []string{"created_at"}
	tradeEventPrimaryKeyColumns     = []string{"id"}
)

type (
	// TradeEventSlice is an alias for a slice of pointers to TradeEvent.
	// This should generally be used opposed to []TradeEvent.
	TradeEventSlice []*TradeEvent
	// TradeEventHook is the signature for custom TradeEvent hook methods
	TradeEventHook func(context.Context, boil.ContextExecutor, *TradeEvent) error

	tradeEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tradeEventType                 = reflect.TypeOf(&TradeEvent{})
	tradeEventMapping              = queries.MakeStructMapping(tradeEventType)
	tradeEventPrimaryKeyMapping, _ = queries.BindMapping(tradeEventType, tradeEventMapping, tradeEventPrimaryKeyColumns)
	tradeEventInsertCacheMut       sync.RWMutex
	tradeEventInsertCache          = make(map[string]insertCache)
	tradeEventUpdateCacheMut       sync.RWMutex
	tradeEventUpdateCache          = make(map[string]updateCache)
	tradeEventUpsertCacheMut       sync.RWMutex
	tradeEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tradeEventBeforeInsertHooks []TradeEventHook
var tradeEventBeforeUpdateHooks []TradeEventHook
var tradeEventBeforeDeleteHooks []TradeEventHook
var tradeEventBeforeUpsertHooks []TradeEventHook

var tradeEventAfterInsertHooks []TradeEventHook
var tradeEventAfterSelectHooks []TradeEventHook
var tradeEventAfterUpdateHooks []TradeEventHook
var tradeEventAfterDeleteHooks []TradeEventHook
var tradeEventAfterUpsertHooks []TradeEventHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TradeEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tradeEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TradeEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tradeEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TradeEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tradeEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TradeEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tradeEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TradeEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tradeEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TradeEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tradeEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TradeEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tradeEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TradeEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tradeEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TradeEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tradeEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTradeEventHook registers your hook function for all future operations.
func AddTradeEventHook(hookPoint boil.HookPoint, tradeEventHook TradeEventHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tradeEventBeforeInsertHooks = append(tradeEventBeforeInsertHooks, tradeEventHook)
	case boil.BeforeUpdateHook:
		tradeEventBeforeUpdateHooks = append(tradeEventBeforeUpdateHooks, tradeEventHook)
	case boil.BeforeDeleteHook:
		tradeEventBeforeDeleteHooks = append(tradeEventBeforeDeleteHooks, tradeEventHook)
	case boil.BeforeUpsertHook:
		tradeEventBeforeUpsertHooks = append(tradeEventBeforeUpsertHooks, tradeEventHook)
	case boil.AfterInsertHook:
		tradeEventAfterInsertHooks = append(tradeEventAfterInsertHooks, tradeEventHook)
	case boil.AfterSelectHook:
		tradeEventAfterSelectHooks = append(tradeEventAfterSelectHooks, tradeEventHook)
	case boil.AfterUpdateHook:
		tradeEventAfterUpdateHooks = append(tradeEventAfterUpdateHooks, tradeEventHook)
	case boil.AfterDeleteHook:
		tradeEventAfterDeleteHooks = append(tradeEventAfterDeleteHooks, tradeEventHook)
	case boil.AfterUpsertHook:
		tradeEventAfterUpsertHooks = append(tradeEventAfterUpsertHooks, tradeEventHook)
	}
}

// One returns a single tradeEvent record from the query.
func (q tradeEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TradeEvent, error) {
	o := &TradeEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlite: failed to execute a one query for trade_event")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TradeEvent records from the query.
func (q tradeEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (TradeEventSlice, error) {
	var o []*TradeEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlite: failed to assign all query results to TradeEvent slice")
	}

	if len(tradeEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TradeEvent records in the query.
func (q tradeEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: failed to count trade_event rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tradeEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlite: failed to check if trade_event exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *TradeEvent) Order(mods ...qm.QueryMod) orderEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := OrderEvents(queryMods...)
	queries.SetFrom(query.Query, "\"order_event\"")

	return query
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradeEventL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTradeEvent interface{}, mods queries.Applicator) error {
	var slice []*TradeEvent
	var object *TradeEvent

	if singular {
		object = maybeTradeEvent.(*TradeEvent)
	} else {
		slice = *maybeTradeEvent.(*[]*TradeEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeEventR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeEventR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`order_event`), qm.WhereIn(`order_event.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderEvent")
	}

	var resultSlice []*OrderEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_event")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_event")
	}

	if len(tradeEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderEventR{}
		}
		foreign.R.OrderTradeEvents = append(foreign.R.OrderTradeEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderEventR{}
				}
				foreign.R.OrderTradeEvents = append(foreign.R.OrderTradeEvents, local)
				break
			}
		}
	}

	return nil
}

// SetOrder of the tradeEvent to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderTradeEvents.
func (o *TradeEvent) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrderEvent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trade_event\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 0, tradeEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &tradeEventR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderEventR{
			OrderTradeEvents: TradeEventSlice{o},
		}
	} else {
		related.R.OrderTradeEvents = append(related.R.OrderTradeEvents, o)
	}

	return nil
}

// TradeEvents retrieves all the records using an executor.
func TradeEvents(mods ...qm.QueryMod) tradeEventQuery {
	mods = append(mods, qm.From("\"trade_event\""))
	return tradeEventQuery{NewQuery(mods...)}
}

// FindTradeEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTradeEvent(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TradeEvent, error) {
	tradeEventObj := &TradeEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trade_event\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tradeEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlite: unable to select from trade_event")
	}

	return tradeEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TradeEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlite: no trade_event provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tradeEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tradeEventInsertCacheMut.RLock()
	cache, cached := tradeEventInsertCache[key]
	tradeEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tradeEventAllColumns,
			tradeEventColumnsWithDefault,
			tradeEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tradeEventType, tradeEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tradeEventType, tradeEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trade_event\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trade_event\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"trade_event\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, tradeEventPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlite: unable to insert into trade_event")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlite: unable to populate default values for trade_event")
	}

CacheNoHooks:
	if !cached {
		tradeEventInsertCacheMut.Lock()
		tradeEventInsertCache[key] = cache
		tradeEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TradeEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TradeEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tradeEventUpdateCacheMut.RLock()
	cache, cached := tradeEventUpdateCache[key]
	tradeEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tradeEventAllColumns,
			tradeEventPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("sqlite: unable to update trade_event, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trade_event\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, tradeEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tradeEventType, tradeEventMapping, append(wl, tradeEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: unable to update trade_event row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: failed to get rows affected by update for trade_event")
	}

	if !cached {
		tradeEventUpdateCacheMut.Lock()
		tradeEventUpdateCache[key] = cache
		tradeEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tradeEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: unable to update all for trade_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: unable to retrieve rows affected for trade_event")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TradeEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlite: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trade_event\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tradeEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: unable to update all in tradeEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: unable to retrieve rows affected all in update all tradeEvent")
	}
	return rowsAff, nil
}

// Delete deletes a single TradeEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TradeEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlite: no TradeEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tradeEventPrimaryKeyMapping)
	sql := "DELETE FROM \"trade_event\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: unable to delete from trade_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: failed to get rows affected by delete for trade_event")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tradeEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlite: no tradeEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: unable to delete all from trade_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: failed to get rows affected by deleteall for trade_event")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TradeEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tradeEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trade_event\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tradeEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: unable to delete all from tradeEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlite: failed to get rows affected by deleteall for trade_event")
	}

	if len(tradeEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TradeEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTradeEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TradeEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TradeEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trade_event\".* FROM \"trade_event\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tradeEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlite: unable to reload all in TradeEventSlice")
	}

	*o = slice

	return nil
}

// TradeEventExists checks if the TradeEvent row exists.
func TradeEventExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trade_event\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlite: unable to check if trade_event exists")
	}

	return exists, nil
}
