// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlite

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/randomize"
	"github.com/thrasher-corp/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTradeEvents(t *testing.T) {
	t.Parallel()

	query := TradeEvents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTradeEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TradeEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradeEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TradeEvents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TradeEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradeEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TradeEventSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TradeEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradeEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TradeEventExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TradeEvent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TradeEventExists to return true, but got false.")
	}
}

func testTradeEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tradeEventFound, err := FindTradeEvent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tradeEventFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTradeEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TradeEvents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTradeEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TradeEvents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTradeEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeEventOne := &TradeEvent{}
	tradeEventTwo := &TradeEvent{}
	if err = randomize.Struct(seed, tradeEventOne, tradeEventDBTypes, false, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, tradeEventTwo, tradeEventDBTypes, false, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tradeEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tradeEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TradeEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTradeEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tradeEventOne := &TradeEvent{}
	tradeEventTwo := &TradeEvent{}
	if err = randomize.Struct(seed, tradeEventOne, tradeEventDBTypes, false, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, tradeEventTwo, tradeEventDBTypes, false, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tradeEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tradeEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradeEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tradeEventBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TradeEvent) error {
	*o = TradeEvent{}
	return nil
}

func tradeEventAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TradeEvent) error {
	*o = TradeEvent{}
	return nil
}

func tradeEventAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TradeEvent) error {
	*o = TradeEvent{}
	return nil
}

func tradeEventBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TradeEvent) error {
	*o = TradeEvent{}
	return nil
}

func tradeEventAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TradeEvent) error {
	*o = TradeEvent{}
	return nil
}

func tradeEventBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TradeEvent) error {
	*o = TradeEvent{}
	return nil
}

func tradeEventAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TradeEvent) error {
	*o = TradeEvent{}
	return nil
}

func tradeEventBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TradeEvent) error {
	*o = TradeEvent{}
	return nil
}

func tradeEventAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TradeEvent) error {
	*o = TradeEvent{}
	return nil
}

func testTradeEventsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TradeEvent{}
	o := &TradeEvent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tradeEventDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TradeEvent object: %s", err)
	}

	AddTradeEventHook(boil.BeforeInsertHook, tradeEventBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tradeEventBeforeInsertHooks = []TradeEventHook{}

	AddTradeEventHook(boil.AfterInsertHook, tradeEventAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tradeEventAfterInsertHooks = []TradeEventHook{}

	AddTradeEventHook(boil.AfterSelectHook, tradeEventAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tradeEventAfterSelectHooks = []TradeEventHook{}

	AddTradeEventHook(boil.BeforeUpdateHook, tradeEventBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tradeEventBeforeUpdateHooks = []TradeEventHook{}

	AddTradeEventHook(boil.AfterUpdateHook, tradeEventAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tradeEventAfterUpdateHooks = []TradeEventHook{}

	AddTradeEventHook(boil.BeforeDeleteHook, tradeEventBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tradeEventBeforeDeleteHooks = []TradeEventHook{}

	AddTradeEventHook(boil.AfterDeleteHook, tradeEventAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tradeEventAfterDeleteHooks = []TradeEventHook{}

	AddTradeEventHook(boil.BeforeUpsertHook, tradeEventBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tradeEventBeforeUpsertHooks = []TradeEventHook{}

	AddTradeEventHook(boil.AfterUpsertHook, tradeEventAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tradeEventAfterUpsertHooks = []TradeEventHook{}
}

func testTradeEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradeEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTradeEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tradeEventColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TradeEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTradeEventToOneOrderEventUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TradeEvent
	var foreign OrderEvent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tradeEventDBTypes, false, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderEventDBTypes, false, orderEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderEvent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrderID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TradeEventSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*TradeEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTradeEventToOneSetOpOrderEventUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TradeEvent
	var b, c OrderEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeEventDBTypes, false, strmangle.SetComplement(tradeEventPrimaryKeyColumns, tradeEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderEventDBTypes, false, strmangle.SetComplement(orderEventPrimaryKeyColumns, orderEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderEventDBTypes, false, strmangle.SetComplement(orderEventPrimaryKeyColumns, orderEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrderEvent{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderTradeEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrderID != x.ID {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrderID != x.ID {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testTradeEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTradeEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TradeEventSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTradeEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TradeEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tradeEventDBTypes = map[string]string{`ID`: `BIGINT`, `TradeID`: `VARCHAR(255)`, `OrderID`: `BIGINT`, `Exchange`: `VARCHAR(255)`, `BaseCurrency`: `VARCHAR(255)`, `QuoteCurrency`: `VARCHAR(255)`, `Side`: `VARCHAR(255)`, `Volume`: `REAL`, `Price`: `REAL`, `Fee`: `REAL`, `Tax`: `REAL`, `ExecutedAt`: `TIMESTAMP`, `UpdatedAt`: `TIMESTAMP`, `CreatedAt`: `TIMESTAMP`}
	_                 = bytes.MinRead
)

func testTradeEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tradeEventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tradeEventAllColumns) == len(tradeEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradeEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTradeEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tradeEventAllColumns) == len(tradeEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TradeEvent{}
	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradeEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tradeEventDBTypes, true, tradeEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TradeEvent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tradeEventAllColumns, tradeEventPrimaryKeyColumns) {
		fields = tradeEventAllColumns
	} else {
		fields = strmangle.SetComplement(
			tradeEventAllColumns,
			tradeEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TradeEventSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
