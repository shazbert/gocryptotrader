// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RoleKey is an object representing the database table.
type RoleKey struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	KeyID     int64     `boil:"key_id" json:"key_id" toml:"key_id" yaml:"key_id"`
	RoleID    int64     `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *roleKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleKeyColumns = struct {
	ID        string
	KeyID     string
	RoleID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	KeyID:     "key_id",
	RoleID:    "role_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var RoleKeyWhere = struct {
	ID        whereHelperint64
	KeyID     whereHelperint64
	RoleID    whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: `id`},
	KeyID:     whereHelperint64{field: `key_id`},
	RoleID:    whereHelperint64{field: `role_id`},
	CreatedAt: whereHelpertime_Time{field: `created_at`},
	UpdatedAt: whereHelpertime_Time{field: `updated_at`},
}

// RoleKeyRels is where relationship names are stored.
var RoleKeyRels = struct {
	Key  string
	Role string
}{
	Key:  "Key",
	Role: "Role",
}

// roleKeyR is where relationships are stored.
type roleKeyR struct {
	Key  *Key
	Role *Role
}

// NewStruct creates a new relationship struct
func (*roleKeyR) NewStruct() *roleKeyR {
	return &roleKeyR{}
}

// roleKeyL is where Load methods for each relationship are stored.
type roleKeyL struct{}

var (
	roleKeyColumns               = []string{"id", "key_id", "role_id", "created_at", "updated_at"}
	roleKeyColumnsWithoutDefault = []string{}
	roleKeyColumnsWithDefault    = []string{"id", "key_id", "role_id", "created_at", "updated_at"}
	roleKeyPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoleKeySlice is an alias for a slice of pointers to RoleKey.
	// This should generally be used opposed to []RoleKey.
	RoleKeySlice []*RoleKey
	// RoleKeyHook is the signature for custom RoleKey hook methods
	RoleKeyHook func(context.Context, boil.ContextExecutor, *RoleKey) error

	roleKeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleKeyType                 = reflect.TypeOf(&RoleKey{})
	roleKeyMapping              = queries.MakeStructMapping(roleKeyType)
	roleKeyPrimaryKeyMapping, _ = queries.BindMapping(roleKeyType, roleKeyMapping, roleKeyPrimaryKeyColumns)
	roleKeyInsertCacheMut       sync.RWMutex
	roleKeyInsertCache          = make(map[string]insertCache)
	roleKeyUpdateCacheMut       sync.RWMutex
	roleKeyUpdateCache          = make(map[string]updateCache)
	roleKeyUpsertCacheMut       sync.RWMutex
	roleKeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roleKeyBeforeInsertHooks []RoleKeyHook
var roleKeyBeforeUpdateHooks []RoleKeyHook
var roleKeyBeforeDeleteHooks []RoleKeyHook
var roleKeyBeforeUpsertHooks []RoleKeyHook

var roleKeyAfterInsertHooks []RoleKeyHook
var roleKeyAfterSelectHooks []RoleKeyHook
var roleKeyAfterUpdateHooks []RoleKeyHook
var roleKeyAfterDeleteHooks []RoleKeyHook
var roleKeyAfterUpsertHooks []RoleKeyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoleKey) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleKeyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoleKey) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleKeyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoleKey) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleKeyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoleKey) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleKeyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoleKey) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleKeyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoleKey) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleKeyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoleKey) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleKeyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoleKey) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleKeyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoleKey) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleKeyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoleKeyHook registers your hook function for all future operations.
func AddRoleKeyHook(hookPoint boil.HookPoint, roleKeyHook RoleKeyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		roleKeyBeforeInsertHooks = append(roleKeyBeforeInsertHooks, roleKeyHook)
	case boil.BeforeUpdateHook:
		roleKeyBeforeUpdateHooks = append(roleKeyBeforeUpdateHooks, roleKeyHook)
	case boil.BeforeDeleteHook:
		roleKeyBeforeDeleteHooks = append(roleKeyBeforeDeleteHooks, roleKeyHook)
	case boil.BeforeUpsertHook:
		roleKeyBeforeUpsertHooks = append(roleKeyBeforeUpsertHooks, roleKeyHook)
	case boil.AfterInsertHook:
		roleKeyAfterInsertHooks = append(roleKeyAfterInsertHooks, roleKeyHook)
	case boil.AfterSelectHook:
		roleKeyAfterSelectHooks = append(roleKeyAfterSelectHooks, roleKeyHook)
	case boil.AfterUpdateHook:
		roleKeyAfterUpdateHooks = append(roleKeyAfterUpdateHooks, roleKeyHook)
	case boil.AfterDeleteHook:
		roleKeyAfterDeleteHooks = append(roleKeyAfterDeleteHooks, roleKeyHook)
	case boil.AfterUpsertHook:
		roleKeyAfterUpsertHooks = append(roleKeyAfterUpsertHooks, roleKeyHook)
	}
}

// One returns a single roleKey record from the query.
func (q roleKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoleKey, error) {
	o := &RoleKey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_keys")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RoleKey records from the query.
func (q roleKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleKeySlice, error) {
	var o []*RoleKey

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleKey slice")
	}

	if len(roleKeyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RoleKey records in the query.
func (q roleKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_keys rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roleKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_keys exists")
	}

	return count > 0, nil
}

// Key pointed to by the foreign key.
func (o *RoleKey) Key(mods ...qm.QueryMod) keyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.KeyID),
	}

	queryMods = append(queryMods, mods...)

	query := Keys(queryMods...)
	queries.SetFrom(query.Query, "\"keys\"")

	return query
}

// Role pointed to by the foreign key.
func (o *RoleKey) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "\"roles\"")

	return query
}

// LoadKey allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleKeyL) LoadKey(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleKey interface{}, mods queries.Applicator) error {
	var slice []*RoleKey
	var object *RoleKey

	if singular {
		object = maybeRoleKey.(*RoleKey)
	} else {
		slice = *maybeRoleKey.(*[]*RoleKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleKeyR{}
		}
		args = append(args, object.KeyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleKeyR{}
			}

			for _, a := range args {
				if a == obj.KeyID {
					continue Outer
				}
			}

			args = append(args, obj.KeyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`keys`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Key")
	}

	var resultSlice []*Key
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Key")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for keys")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for keys")
	}

	if len(roleKeyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Key = foreign
		if foreign.R == nil {
			foreign.R = &keyR{}
		}
		foreign.R.RoleKeys = append(foreign.R.RoleKeys, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.KeyID == foreign.ID {
				local.R.Key = foreign
				if foreign.R == nil {
					foreign.R = &keyR{}
				}
				foreign.R.RoleKeys = append(foreign.R.RoleKeys, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleKeyL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleKey interface{}, mods queries.Applicator) error {
	var slice []*RoleKey
	var object *RoleKey

	if singular {
		object = maybeRoleKey.(*RoleKey)
	} else {
		slice = *maybeRoleKey.(*[]*RoleKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleKeyR{}
		}
		args = append(args, object.RoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleKeyR{}
			}

			for _, a := range args {
				if a == obj.RoleID {
					continue Outer
				}
			}

			args = append(args, obj.RoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`roles`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleKeyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.RoleKeys = append(foreign.R.RoleKeys, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.RoleKeys = append(foreign.R.RoleKeys, local)
				break
			}
		}
	}

	return nil
}

// SetKey of the roleKey to the related item.
// Sets o.R.Key to related.
// Adds o to related.R.RoleKeys.
func (o *RoleKey) SetKey(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Key) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"key_id"}),
		strmangle.WhereClause("\"", "\"", 0, roleKeyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.KeyID = related.ID
	if o.R == nil {
		o.R = &roleKeyR{
			Key: related,
		}
	} else {
		o.R.Key = related
	}

	if related.R == nil {
		related.R = &keyR{
			RoleKeys: RoleKeySlice{o},
		}
	} else {
		related.R.RoleKeys = append(related.R.RoleKeys, o)
	}

	return nil
}

// SetRole of the roleKey to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleKeys.
func (o *RoleKey) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 0, roleKeyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &roleKeyR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			RoleKeys: RoleKeySlice{o},
		}
	} else {
		related.R.RoleKeys = append(related.R.RoleKeys, o)
	}

	return nil
}

// RoleKeys retrieves all the records using an executor.
func RoleKeys(mods ...qm.QueryMod) roleKeyQuery {
	mods = append(mods, qm.From("\"role_keys\""))
	return roleKeyQuery{NewQuery(mods...)}
}

// FindRoleKey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleKey(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RoleKey, error) {
	roleKeyObj := &RoleKey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_keys\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roleKeyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_keys")
	}

	return roleKeyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleKey) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_keys provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleKeyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleKeyInsertCacheMut.RLock()
	cache, cached := roleKeyInsertCache[key]
	roleKeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleKeyColumns,
			roleKeyColumnsWithDefault,
			roleKeyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleKeyType, roleKeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleKeyType, roleKeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_keys\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_keys\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"role_keys\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, roleKeyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_keys")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == roleKeyMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for role_keys")
	}

CacheNoHooks:
	if !cached {
		roleKeyInsertCacheMut.Lock()
		roleKeyInsertCache[key] = cache
		roleKeyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RoleKey.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleKey) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roleKeyUpdateCacheMut.RLock()
	cache, cached := roleKeyUpdateCache[key]
	roleKeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleKeyColumns,
			roleKeyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update role_keys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_keys\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, roleKeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleKeyType, roleKeyMapping, append(wl, roleKeyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update role_keys row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for role_keys")
	}

	if !cached {
		roleKeyUpdateCacheMut.Lock()
		roleKeyUpdateCache[key] = cache
		roleKeyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roleKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for role_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for role_keys")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleKeySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleKeyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in roleKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all roleKey")
	}
	return rowsAff, nil
}

// Delete deletes a single RoleKey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleKey) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleKey provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleKeyPrimaryKeyMapping)
	sql := "DELETE FROM \"role_keys\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from role_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for role_keys")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roleKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleKeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_keys")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleKeySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleKey slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(roleKeyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleKeyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roleKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_keys")
	}

	if len(roleKeyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleKey) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoleKey(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleKeySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleKeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_keys\".* FROM \"role_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleKeyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleKeySlice")
	}

	*o = slice

	return nil
}

// RoleKeyExists checks if the RoleKey row exists.
func RoleKeyExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_keys\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_keys exists")
	}

	return exists, nil
}
