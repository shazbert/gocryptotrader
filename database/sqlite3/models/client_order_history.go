// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ClientOrderHistory is an object representing the database table.
type ClientOrderHistory struct {
	ID           int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderID      string    `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	FulfilledOn  time.Time `boil:"fulfilled_on" json:"fulfilled_on" toml:"fulfilled_on" yaml:"fulfilled_on"`
	CurrencyPair string    `boil:"currency_pair" json:"currency_pair" toml:"currency_pair" yaml:"currency_pair"`
	AssetType    string    `boil:"asset_type" json:"asset_type" toml:"asset_type" yaml:"asset_type"`
	OrderType    string    `boil:"order_type" json:"order_type" toml:"order_type" yaml:"order_type"`
	Amount       float64   `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Rate         float64   `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`
	ExchangeID   int64     `boil:"exchange_id" json:"exchange_id" toml:"exchange_id" yaml:"exchange_id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *clientOrderHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clientOrderHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClientOrderHistoryColumns = struct {
	ID           string
	OrderID      string
	FulfilledOn  string
	CurrencyPair string
	AssetType    string
	OrderType    string
	Amount       string
	Rate         string
	ExchangeID   string
	CreatedAt    string
}{
	ID:           "id",
	OrderID:      "order_id",
	FulfilledOn:  "fulfilled_on",
	CurrencyPair: "currency_pair",
	AssetType:    "asset_type",
	OrderType:    "order_type",
	Amount:       "amount",
	Rate:         "rate",
	ExchangeID:   "exchange_id",
	CreatedAt:    "created_at",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ClientOrderHistoryWhere = struct {
	ID           whereHelperint64
	OrderID      whereHelperstring
	FulfilledOn  whereHelpertime_Time
	CurrencyPair whereHelperstring
	AssetType    whereHelperstring
	OrderType    whereHelperstring
	Amount       whereHelperfloat64
	Rate         whereHelperfloat64
	ExchangeID   whereHelperint64
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint64{field: `id`},
	OrderID:      whereHelperstring{field: `order_id`},
	FulfilledOn:  whereHelpertime_Time{field: `fulfilled_on`},
	CurrencyPair: whereHelperstring{field: `currency_pair`},
	AssetType:    whereHelperstring{field: `asset_type`},
	OrderType:    whereHelperstring{field: `order_type`},
	Amount:       whereHelperfloat64{field: `amount`},
	Rate:         whereHelperfloat64{field: `rate`},
	ExchangeID:   whereHelperint64{field: `exchange_id`},
	CreatedAt:    whereHelpertime_Time{field: `created_at`},
}

// ClientOrderHistoryRels is where relationship names are stored.
var ClientOrderHistoryRels = struct {
	Exchange string
}{
	Exchange: "Exchange",
}

// clientOrderHistoryR is where relationships are stored.
type clientOrderHistoryR struct {
	Exchange *Exchange
}

// NewStruct creates a new relationship struct
func (*clientOrderHistoryR) NewStruct() *clientOrderHistoryR {
	return &clientOrderHistoryR{}
}

// clientOrderHistoryL is where Load methods for each relationship are stored.
type clientOrderHistoryL struct{}

var (
	clientOrderHistoryColumns               = []string{"id", "order_id", "fulfilled_on", "currency_pair", "asset_type", "order_type", "amount", "rate", "exchange_id", "created_at"}
	clientOrderHistoryColumnsWithoutDefault = []string{}
	clientOrderHistoryColumnsWithDefault    = []string{"id", "order_id", "fulfilled_on", "currency_pair", "asset_type", "order_type", "amount", "rate", "exchange_id", "created_at"}
	clientOrderHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClientOrderHistorySlice is an alias for a slice of pointers to ClientOrderHistory.
	// This should generally be used opposed to []ClientOrderHistory.
	ClientOrderHistorySlice []*ClientOrderHistory
	// ClientOrderHistoryHook is the signature for custom ClientOrderHistory hook methods
	ClientOrderHistoryHook func(context.Context, boil.ContextExecutor, *ClientOrderHistory) error

	clientOrderHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clientOrderHistoryType                 = reflect.TypeOf(&ClientOrderHistory{})
	clientOrderHistoryMapping              = queries.MakeStructMapping(clientOrderHistoryType)
	clientOrderHistoryPrimaryKeyMapping, _ = queries.BindMapping(clientOrderHistoryType, clientOrderHistoryMapping, clientOrderHistoryPrimaryKeyColumns)
	clientOrderHistoryInsertCacheMut       sync.RWMutex
	clientOrderHistoryInsertCache          = make(map[string]insertCache)
	clientOrderHistoryUpdateCacheMut       sync.RWMutex
	clientOrderHistoryUpdateCache          = make(map[string]updateCache)
	clientOrderHistoryUpsertCacheMut       sync.RWMutex
	clientOrderHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clientOrderHistoryBeforeInsertHooks []ClientOrderHistoryHook
var clientOrderHistoryBeforeUpdateHooks []ClientOrderHistoryHook
var clientOrderHistoryBeforeDeleteHooks []ClientOrderHistoryHook
var clientOrderHistoryBeforeUpsertHooks []ClientOrderHistoryHook

var clientOrderHistoryAfterInsertHooks []ClientOrderHistoryHook
var clientOrderHistoryAfterSelectHooks []ClientOrderHistoryHook
var clientOrderHistoryAfterUpdateHooks []ClientOrderHistoryHook
var clientOrderHistoryAfterDeleteHooks []ClientOrderHistoryHook
var clientOrderHistoryAfterUpsertHooks []ClientOrderHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClientOrderHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientOrderHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClientOrderHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientOrderHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClientOrderHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientOrderHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClientOrderHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientOrderHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClientOrderHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientOrderHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClientOrderHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientOrderHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClientOrderHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientOrderHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClientOrderHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientOrderHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClientOrderHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientOrderHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClientOrderHistoryHook registers your hook function for all future operations.
func AddClientOrderHistoryHook(hookPoint boil.HookPoint, clientOrderHistoryHook ClientOrderHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clientOrderHistoryBeforeInsertHooks = append(clientOrderHistoryBeforeInsertHooks, clientOrderHistoryHook)
	case boil.BeforeUpdateHook:
		clientOrderHistoryBeforeUpdateHooks = append(clientOrderHistoryBeforeUpdateHooks, clientOrderHistoryHook)
	case boil.BeforeDeleteHook:
		clientOrderHistoryBeforeDeleteHooks = append(clientOrderHistoryBeforeDeleteHooks, clientOrderHistoryHook)
	case boil.BeforeUpsertHook:
		clientOrderHistoryBeforeUpsertHooks = append(clientOrderHistoryBeforeUpsertHooks, clientOrderHistoryHook)
	case boil.AfterInsertHook:
		clientOrderHistoryAfterInsertHooks = append(clientOrderHistoryAfterInsertHooks, clientOrderHistoryHook)
	case boil.AfterSelectHook:
		clientOrderHistoryAfterSelectHooks = append(clientOrderHistoryAfterSelectHooks, clientOrderHistoryHook)
	case boil.AfterUpdateHook:
		clientOrderHistoryAfterUpdateHooks = append(clientOrderHistoryAfterUpdateHooks, clientOrderHistoryHook)
	case boil.AfterDeleteHook:
		clientOrderHistoryAfterDeleteHooks = append(clientOrderHistoryAfterDeleteHooks, clientOrderHistoryHook)
	case boil.AfterUpsertHook:
		clientOrderHistoryAfterUpsertHooks = append(clientOrderHistoryAfterUpsertHooks, clientOrderHistoryHook)
	}
}

// One returns a single clientOrderHistory record from the query.
func (q clientOrderHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClientOrderHistory, error) {
	o := &ClientOrderHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for client_order_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClientOrderHistory records from the query.
func (q clientOrderHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClientOrderHistorySlice, error) {
	var o []*ClientOrderHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ClientOrderHistory slice")
	}

	if len(clientOrderHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClientOrderHistory records in the query.
func (q clientOrderHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count client_order_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clientOrderHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if client_order_history exists")
	}

	return count > 0, nil
}

// Exchange pointed to by the foreign key.
func (o *ClientOrderHistory) Exchange(mods ...qm.QueryMod) exchangeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ExchangeID),
	}

	queryMods = append(queryMods, mods...)

	query := Exchanges(queryMods...)
	queries.SetFrom(query.Query, "\"exchange\"")

	return query
}

// LoadExchange allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clientOrderHistoryL) LoadExchange(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClientOrderHistory interface{}, mods queries.Applicator) error {
	var slice []*ClientOrderHistory
	var object *ClientOrderHistory

	if singular {
		object = maybeClientOrderHistory.(*ClientOrderHistory)
	} else {
		slice = *maybeClientOrderHistory.(*[]*ClientOrderHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clientOrderHistoryR{}
		}
		args = append(args, object.ExchangeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clientOrderHistoryR{}
			}

			for _, a := range args {
				if a == obj.ExchangeID {
					continue Outer
				}
			}

			args = append(args, obj.ExchangeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`exchange`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exchange")
	}

	var resultSlice []*Exchange
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exchange")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exchange")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exchange")
	}

	if len(clientOrderHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Exchange = foreign
		if foreign.R == nil {
			foreign.R = &exchangeR{}
		}
		foreign.R.ClientOrderHistory = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExchangeID == foreign.ID {
				local.R.Exchange = foreign
				if foreign.R == nil {
					foreign.R = &exchangeR{}
				}
				foreign.R.ClientOrderHistory = local
				break
			}
		}
	}

	return nil
}

// SetExchange of the clientOrderHistory to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.ClientOrderHistory.
func (o *ClientOrderHistory) SetExchange(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Exchange) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"client_order_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"exchange_id"}),
		strmangle.WhereClause("\"", "\"", 0, clientOrderHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExchangeID = related.ID
	if o.R == nil {
		o.R = &clientOrderHistoryR{
			Exchange: related,
		}
	} else {
		o.R.Exchange = related
	}

	if related.R == nil {
		related.R = &exchangeR{
			ClientOrderHistory: o,
		}
	} else {
		related.R.ClientOrderHistory = o
	}

	return nil
}

// ClientOrderHistories retrieves all the records using an executor.
func ClientOrderHistories(mods ...qm.QueryMod) clientOrderHistoryQuery {
	mods = append(mods, qm.From("\"client_order_history\""))
	return clientOrderHistoryQuery{NewQuery(mods...)}
}

// FindClientOrderHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClientOrderHistory(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ClientOrderHistory, error) {
	clientOrderHistoryObj := &ClientOrderHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"client_order_history\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, clientOrderHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from client_order_history")
	}

	return clientOrderHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClientOrderHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no client_order_history provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientOrderHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clientOrderHistoryInsertCacheMut.RLock()
	cache, cached := clientOrderHistoryInsertCache[key]
	clientOrderHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clientOrderHistoryColumns,
			clientOrderHistoryColumnsWithDefault,
			clientOrderHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clientOrderHistoryType, clientOrderHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clientOrderHistoryType, clientOrderHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"client_order_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"client_order_history\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"client_order_history\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, clientOrderHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into client_order_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clientOrderHistoryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for client_order_history")
	}

CacheNoHooks:
	if !cached {
		clientOrderHistoryInsertCacheMut.Lock()
		clientOrderHistoryInsertCache[key] = cache
		clientOrderHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClientOrderHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClientOrderHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clientOrderHistoryUpdateCacheMut.RLock()
	cache, cached := clientOrderHistoryUpdateCache[key]
	clientOrderHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clientOrderHistoryColumns,
			clientOrderHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update client_order_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"client_order_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, clientOrderHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clientOrderHistoryType, clientOrderHistoryMapping, append(wl, clientOrderHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update client_order_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for client_order_history")
	}

	if !cached {
		clientOrderHistoryUpdateCacheMut.Lock()
		clientOrderHistoryUpdateCache[key] = cache
		clientOrderHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clientOrderHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for client_order_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for client_order_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClientOrderHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientOrderHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"client_order_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientOrderHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in clientOrderHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all clientOrderHistory")
	}
	return rowsAff, nil
}

// Delete deletes a single ClientOrderHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClientOrderHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ClientOrderHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clientOrderHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"client_order_history\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from client_order_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for client_order_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clientOrderHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no clientOrderHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from client_order_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for client_order_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClientOrderHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ClientOrderHistory slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(clientOrderHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientOrderHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"client_order_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientOrderHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from clientOrderHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for client_order_history")
	}

	if len(clientOrderHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClientOrderHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClientOrderHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClientOrderHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClientOrderHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientOrderHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"client_order_history\".* FROM \"client_order_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientOrderHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClientOrderHistorySlice")
	}

	*o = slice

	return nil
}

// ClientOrderHistoryExists checks if the ClientOrderHistory row exists.
func ClientOrderHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"client_order_history\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if client_order_history exists")
	}

	return exists, nil
}
