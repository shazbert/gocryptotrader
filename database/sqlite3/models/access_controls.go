// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AccessControl is an object representing the database table.
type AccessControl struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Level     int64     `boil:"level" json:"level" toml:"level" yaml:"level"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *accessControlR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accessControlL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccessControlColumns = struct {
	ID        string
	Level     string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Level:     "level",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AccessControlWhere = struct {
	ID        whereHelperint64
	Level     whereHelperint64
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: `id`},
	Level:     whereHelperint64{field: `level`},
	Name:      whereHelperstring{field: `name`},
	CreatedAt: whereHelpertime_Time{field: `created_at`},
	UpdatedAt: whereHelpertime_Time{field: `updated_at`},
}

// AccessControlRels is where relationship names are stored.
var AccessControlRels = struct {
	AccessLevelClients string
}{
	AccessLevelClients: "AccessLevelClients",
}

// accessControlR is where relationships are stored.
type accessControlR struct {
	AccessLevelClients ClientSlice
}

// NewStruct creates a new relationship struct
func (*accessControlR) NewStruct() *accessControlR {
	return &accessControlR{}
}

// accessControlL is where Load methods for each relationship are stored.
type accessControlL struct{}

var (
	accessControlColumns               = []string{"id", "level", "name", "created_at", "updated_at"}
	accessControlColumnsWithoutDefault = []string{}
	accessControlColumnsWithDefault    = []string{"id", "level", "name", "created_at", "updated_at"}
	accessControlPrimaryKeyColumns     = []string{"id"}
)

type (
	// AccessControlSlice is an alias for a slice of pointers to AccessControl.
	// This should generally be used opposed to []AccessControl.
	AccessControlSlice []*AccessControl
	// AccessControlHook is the signature for custom AccessControl hook methods
	AccessControlHook func(context.Context, boil.ContextExecutor, *AccessControl) error

	accessControlQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accessControlType                 = reflect.TypeOf(&AccessControl{})
	accessControlMapping              = queries.MakeStructMapping(accessControlType)
	accessControlPrimaryKeyMapping, _ = queries.BindMapping(accessControlType, accessControlMapping, accessControlPrimaryKeyColumns)
	accessControlInsertCacheMut       sync.RWMutex
	accessControlInsertCache          = make(map[string]insertCache)
	accessControlUpdateCacheMut       sync.RWMutex
	accessControlUpdateCache          = make(map[string]updateCache)
	accessControlUpsertCacheMut       sync.RWMutex
	accessControlUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accessControlBeforeInsertHooks []AccessControlHook
var accessControlBeforeUpdateHooks []AccessControlHook
var accessControlBeforeDeleteHooks []AccessControlHook
var accessControlBeforeUpsertHooks []AccessControlHook

var accessControlAfterInsertHooks []AccessControlHook
var accessControlAfterSelectHooks []AccessControlHook
var accessControlAfterUpdateHooks []AccessControlHook
var accessControlAfterDeleteHooks []AccessControlHook
var accessControlAfterUpsertHooks []AccessControlHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccessControl) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accessControlBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccessControl) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accessControlBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccessControl) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accessControlBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccessControl) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accessControlBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccessControl) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accessControlAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccessControl) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accessControlAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccessControl) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accessControlAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccessControl) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accessControlAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccessControl) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accessControlAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccessControlHook registers your hook function for all future operations.
func AddAccessControlHook(hookPoint boil.HookPoint, accessControlHook AccessControlHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		accessControlBeforeInsertHooks = append(accessControlBeforeInsertHooks, accessControlHook)
	case boil.BeforeUpdateHook:
		accessControlBeforeUpdateHooks = append(accessControlBeforeUpdateHooks, accessControlHook)
	case boil.BeforeDeleteHook:
		accessControlBeforeDeleteHooks = append(accessControlBeforeDeleteHooks, accessControlHook)
	case boil.BeforeUpsertHook:
		accessControlBeforeUpsertHooks = append(accessControlBeforeUpsertHooks, accessControlHook)
	case boil.AfterInsertHook:
		accessControlAfterInsertHooks = append(accessControlAfterInsertHooks, accessControlHook)
	case boil.AfterSelectHook:
		accessControlAfterSelectHooks = append(accessControlAfterSelectHooks, accessControlHook)
	case boil.AfterUpdateHook:
		accessControlAfterUpdateHooks = append(accessControlAfterUpdateHooks, accessControlHook)
	case boil.AfterDeleteHook:
		accessControlAfterDeleteHooks = append(accessControlAfterDeleteHooks, accessControlHook)
	case boil.AfterUpsertHook:
		accessControlAfterUpsertHooks = append(accessControlAfterUpsertHooks, accessControlHook)
	}
}

// One returns a single accessControl record from the query.
func (q accessControlQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AccessControl, error) {
	o := &AccessControl{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for access_controls")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AccessControl records from the query.
func (q accessControlQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccessControlSlice, error) {
	var o []*AccessControl

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AccessControl slice")
	}

	if len(accessControlAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AccessControl records in the query.
func (q accessControlQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count access_controls rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accessControlQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if access_controls exists")
	}

	return count > 0, nil
}

// AccessLevelClients retrieves all the client's Clients with an executor via access_level_id column.
func (o *AccessControl) AccessLevelClients(mods ...qm.QueryMod) clientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"clients\".\"access_level_id\"=?", o.Level),
	)

	query := Clients(queryMods...)
	queries.SetFrom(query.Query, "\"clients\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"clients\".*"})
	}

	return query
}

// LoadAccessLevelClients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (accessControlL) LoadAccessLevelClients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccessControl interface{}, mods queries.Applicator) error {
	var slice []*AccessControl
	var object *AccessControl

	if singular {
		object = maybeAccessControl.(*AccessControl)
	} else {
		slice = *maybeAccessControl.(*[]*AccessControl)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accessControlR{}
		}
		args = append(args, object.Level)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accessControlR{}
			}

			for _, a := range args {
				if a == obj.Level {
					continue Outer
				}
			}

			args = append(args, obj.Level)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`clients`), qm.WhereIn(`access_level_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load clients")
	}

	var resultSlice []*Client
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice clients")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on clients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for clients")
	}

	if len(clientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AccessLevelClients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clientR{}
			}
			foreign.R.AccessLevel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Level == foreign.AccessLevelID {
				local.R.AccessLevelClients = append(local.R.AccessLevelClients, foreign)
				if foreign.R == nil {
					foreign.R = &clientR{}
				}
				foreign.R.AccessLevel = local
				break
			}
		}
	}

	return nil
}

// AddAccessLevelClients adds the given related objects to the existing relationships
// of the access_control, optionally inserting them as new records.
// Appends related to o.R.AccessLevelClients.
// Sets related.R.AccessLevel appropriately.
func (o *AccessControl) AddAccessLevelClients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Client) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AccessLevelID = o.Level
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"clients\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"access_level_id"}),
				strmangle.WhereClause("\"", "\"", 0, clientPrimaryKeyColumns),
			)
			values := []interface{}{o.Level, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AccessLevelID = o.Level
		}
	}

	if o.R == nil {
		o.R = &accessControlR{
			AccessLevelClients: related,
		}
	} else {
		o.R.AccessLevelClients = append(o.R.AccessLevelClients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clientR{
				AccessLevel: o,
			}
		} else {
			rel.R.AccessLevel = o
		}
	}
	return nil
}

// AccessControls retrieves all the records using an executor.
func AccessControls(mods ...qm.QueryMod) accessControlQuery {
	mods = append(mods, qm.From("\"access_controls\""))
	return accessControlQuery{NewQuery(mods...)}
}

// FindAccessControl retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccessControl(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*AccessControl, error) {
	accessControlObj := &AccessControl{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"access_controls\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, accessControlObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from access_controls")
	}

	return accessControlObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccessControl) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no access_controls provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accessControlColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accessControlInsertCacheMut.RLock()
	cache, cached := accessControlInsertCache[key]
	accessControlInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accessControlColumns,
			accessControlColumnsWithDefault,
			accessControlColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accessControlType, accessControlMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accessControlType, accessControlMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"access_controls\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"access_controls\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"access_controls\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, accessControlPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into access_controls")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == accessControlMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for access_controls")
	}

CacheNoHooks:
	if !cached {
		accessControlInsertCacheMut.Lock()
		accessControlInsertCache[key] = cache
		accessControlInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AccessControl.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccessControl) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accessControlUpdateCacheMut.RLock()
	cache, cached := accessControlUpdateCache[key]
	accessControlUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accessControlColumns,
			accessControlPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update access_controls, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"access_controls\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, accessControlPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accessControlType, accessControlMapping, append(wl, accessControlPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update access_controls row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for access_controls")
	}

	if !cached {
		accessControlUpdateCacheMut.Lock()
		accessControlUpdateCache[key] = cache
		accessControlUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q accessControlQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for access_controls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for access_controls")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccessControlSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accessControlPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"access_controls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accessControlPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in accessControl slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all accessControl")
	}
	return rowsAff, nil
}

// Delete deletes a single AccessControl record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccessControl) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccessControl provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accessControlPrimaryKeyMapping)
	sql := "DELETE FROM \"access_controls\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from access_controls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for access_controls")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accessControlQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no accessControlQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from access_controls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for access_controls")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccessControlSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccessControl slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(accessControlBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accessControlPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"access_controls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accessControlPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from accessControl slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for access_controls")
	}

	if len(accessControlAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccessControl) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccessControl(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccessControlSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccessControlSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accessControlPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"access_controls\".* FROM \"access_controls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accessControlPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AccessControlSlice")
	}

	*o = slice

	return nil
}

// AccessControlExists checks if the AccessControl row exists.
func AccessControlExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"access_controls\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if access_controls exists")
	}

	return exists, nil
}
